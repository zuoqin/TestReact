#+STARTUP: showall
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="blogstyle.css" />
#+LATEX_HEADER: \usepackage[english,russian]{babel} 
#+LATEX_HEADER: \usepackage[T2A]{fontenc} 



#+LaTeX_HEADER: \selectlanguage{russian}

#+TITLE: Выбор между React и Angular

* Начну с преимуществ Angular2 по сравнению с React

** Выбор функционала строго регламентирован
Поскольку Angualar является фреймворком, он предоставляет значительно больше уже готовой функциональности и методов ее использования. С React я как правило загружаю набор других библиотек для создания полноценного приложения. Я использую например библиотеки для роутинга, двухнаправленных потоков данных, вызовов API, тестирования, управления зависимостями и т.д. То есть набор возможных решений довольно широк, и поэтому React имеет столь много самоучителей.

Angualar спазу же регламентирует процесс использования функциональности, что позволяет начать работу с ней гораздо быстрее не задумываясь о выборе конкретной реализации. Такое логичное построение фреймворка позволяет новичкам скорее чувствовать себя как дома и соответственно легче менять или переводить разработчиков из одной команды в другую.


** TypeScript = чистый код
Разумеется, не все любят TypeScript, но решение, принятое в Angular2 по поводу использования конкретно одного из JavaScript лексиконов является огромной победой. Например, можно заметить, что примеры использования React довольно противоречивы: они представлены в вариантах ES5 и ES6 практически в одинаковом количестве, а также предоставляет три различных метода объявления компонент. Это создает путаницу для начинающих. Angular в свою очередь включает декораторы вместо расширений - многие рассматривают это как большой плюс.

Хотя Angular2 не требует TypeScript, ключевая команда Angular однозначно пользуется им и делает его языком по умолчанию в документации. Это означает, что примеры и проекты с открытым кодом будут более вероятно выглядет понятно и согласовано. Angular уже предоставляет примеры показывающие использование компилятора TypeScript. Эта последовательность позволяет избежать путаницы и необходимости принятия решения в выборе технологии  при использовании React.

** Смена версий
2015 год был однозначно годом стремительного развития JavaScript. Хотя предполагается, что React будет стабильным начиная с версии 15, экосистема React изменяется быстрыми темпами, в частности в области различных диалектов поддержки Flux и роутинга. Это означает, что многие из библиотек React, что я использую сегодня могут уже не поддерживаться в ближайшем будущем.
Angular2, наоборот, представляет осторожное и методологическое изменение зрелого и всестороннего фреймворка. То есть Angular значительно менее вероятно будет претерпевать болезненные изменения после релиза. Также, являясь полноценным фреймворком, при выборе Angular я могу довериться одной команде, принимающей решения о будущем развитии. В React я должен принять ответственность о согласованности использования множества быстро изменяющихся библиотек с открытым кодом в полноценном проекте. Разумеется, это требует значительного времения, часто приносит разочарования и является никогда не прекращающейся работой.

** Поддержка со стороны инструментов разработки.
React JSX требует выбора правильных инструментов, поддерживающих JSX. React стал столь популярным, что на сегодняшний день особой проблемы с инструментальной поддержкой нет, однако новые среды разработки, linter-ы почти наверняка не будут поддерживать новые возможности JSX в первый же день их выхода. Шаблоны Angular2 сохраняют разметку в строках или в отдельных файлах, не требуя никакой специальной поддержки (хотя замечу, что инструменты парсирования строк Angular уже начинаются появлятся).

** Дружественность Web Component
Angualar2 дизайн включает Web component стандарт. Вкратце, компоненты, написанные на Angualr2 должны конвертироваться в обыкновенные web компоненты гораздо легче, чем React компоненты. И хотя поддержка со стороны браузеров пока еще слабая, однако это может быть большим в плюсом в далекой перспективе.

* Преимущества React

# Local Variables:
# org-latex-inputenc-alist: (("utf8x" . "utf8"))
# eval: (setq org-latex-default-packages-alist (cons '("mathletters" "ucs" nil) org-latex-default-packages-alist))
# End:
